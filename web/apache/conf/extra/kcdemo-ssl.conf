# ----------------------------------------------------------------------
# Fichier de configuration Apache (exemple /etc/apache2/sites-available/kcdemo.conf)
# ----------------------------------------------------------------------
LoadModule auth_openidc_module modules/mod_auth_openidc.so

Define portal_base_url https://${SERVER_NAME}
Define oidc_provider_base_url ${OIDC_PROVIDER}/${OIDC_REALM}
Define oidc_provider_internal_base_url ${OIDC_PROVIDER_INTERNAL}/${OIDC_REALM}
Define angular_host host.docker.internal:4200
Define angular_base_url http://${angular_host}
Define api_base_url https://host.docker.internal:9012

# -------------------------
# Configuration SSL
# -------------------------
# Certificats à adapter à votre environnement
SSLCertificateFile        /usr/local/apache2/conf/my-ssl.crt
SSLCertificateKeyFile     /usr/local/apache2/conf/my-ssl.key
# Si vous avez une autorité intermédiaire :
# SSLCertificateChainFile /path/to/chain.crt

<IfModule mod_ssl.c>
<VirtualHost *:443>
    ServerName ${SERVER_NAME}

    # DocumentRoot pour fichiers statiques (pas d'Angular)
    DocumentRoot "/usr/local/apache2/htdocs"
    <Directory "/usr/local/apache2/htdocs">
        Options Indexes FollowSymLinks
        AllowOverride None
        Require all granted
    </Directory>

    # -------------------------
    # Configuration mod_auth_openidc
    # -------------------------
    # URL de découverte de Keycloak
    OIDCProviderMetadataURL         ${oidc_provider_internal_base_url}/.well-known/openid-configuration
    OIDCProviderTokenEndpoint       ${oidc_provider_internal_base_url}/protocol/openid-connect/token
    OIDCProviderJwksUri             ${oidc_provider_internal_base_url}/protocol/openid-connect/certs
    OIDCProviderUserInfoEndpoint    ${oidc_provider_internal_base_url}/protocol/openid-connect/userinfo

    #OIDCProviderTokenEndpointAuth client_secret_basic

    # Identifiants du client OIDC enregistré dans Keycloak
    OIDCClientID              ${OIDC_CLIENT}
    OIDCClientSecret          ${OIDC_SECRET}

    # URL de redirection après authentification (doit correspondre à l'URL configurée côté Keycloak)
    OIDCRedirectURI           ${portal_base_url}/protected/redirect_uri
    # URL par défaut si aucune target_link_uri n'est fournie lors du SSO
    OIDCDefaultURL            ${portal_base_url}/

    # Phrase secrète pour le chiffrement des cookies de session OIDC
    OIDCCryptoPassphrase      ${OIDC_CRYPT}

    #####################
    # Config de session #
    #####################
    # stockée côté serveur (plus sûr pour de la prod)
    OIDCSessionType                     server-cache
    # 7d
    OIDCSessionMaxDuration              604800
    #OIDCSessionMaxDuration              86400  # 24h
    #OIDCSessionInactivityTimeout        3600 # 1h
    # Rafraîchit automatiquement l’access token 1 min avant son expiration
    OIDCRefreshAccessTokenBeforeExpiry  60

    # Options diverses
    # Si vous n'avez pas de certificat "officiel" pour Keycloak en local :
    OIDCSSLValidateServer     Off

    # Ajustez les claims que vous souhaitez récupérer (remote_user, etc.)
    OIDCScope                 "openid email profile"
    # Active explicitement PKCE avec la méthode S256 (requis par Keycloak récent)
    OIDCPKCEMethod            S256

    # -------------------------
    # Configuration Reverse Proxy
    # -------------------------
    ProxyPreserveHost       on
    ProxyRequests           off
    SSLProxyEngine          on
    SSLProxyVerify          none
    SSLProxyCheckPeerName   off


    # =====================
    # Endpoint /userinfo
    # =====================
    # Activate userinfo URL
    OIDCInfoHook                userinfo
    OIDCUserInfoRefreshInterval 0
    # Enable mod_rewrite for /userinfo -> redirect to OIDC callback
    RewriteEngine On
    RewriteRule                 "^/userinfo" "${portal_base_url}/protected/redirect_uri?info=json" [R,L]


    # -------------------------
    # Protection OIDC (statique)
    # -------------------------
    # Exclure la route de callback OIDC de l'auth
    ProxyPass           /protected/redirect_uri !

    <Location />
        AuthType            None
        Require             all granted
    </Location>

    # Ne protéger que la section /protected (la racine reste publique)
    <Location /protected>
        AuthType            openid-connect
        Require             valid-user
    </Location>

    # Gestion du logout
    OIDCDefaultLoggedOutURL     ${oidc_provider_base_url}/protocol/openid-connect/logout?redirect_uri=${portal_base_url}
    RewriteRule                 "^/logout" "${portal_base_url}/protected/redirect_uri?logout=${portal_base_url}" [R,L]


    # -------------------------
    # Protège l'accès à votre backend Spring Boot (/api) par OIDC
    # -------------------------
    <Location /api>
        <If "-n %{HTTP:Authorization}">
            AuthType    None
            Require     all granted
        </If>
        <Else>
            AuthType            openid-connect
            Require             valid-user
            OIDCUnAuthAction    401
            RequestHeader       set Authorization "Bearer %{OIDC_ACCESS_TOKEN}e"
        </Else>

        ProxyPass           ${api_base_url}/api
        ProxyPassReverse    ${api_base_url}/api
        Header              always set Access-Control-Allow-Origin ${portal_base_url}
        Header              always set Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
        Header              always set Access-Control-Allow-Headers "Content-Type, Authorization"
        Header              always set Access-Control-Allow-Credentials "true"
    </Location>

</VirtualHost>
</IfModule>
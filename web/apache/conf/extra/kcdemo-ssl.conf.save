LoadModule auth_openidc_module modules/mod_auth_openidc.so

Define portal_path /var/www/html
Define portal_base_url https://${SERVER_NAME}
Define api_base_url https://host.docker.internal:9012/api

#<IfModule mod_headers.c>
#     Header set Content-Security-Policy "default-src 'self' https://api.finzen.local; script-src 'self'; style-src 'self'; img-src 'self'; connect-src 'self' https://api.finzen.local"
#</IfModule>

# -----------------------------------
# OIDC module configuration
# -----------------------------------
<IfModule auth_openidc_module>

    OIDCCookieHTTPOnly Off
    OIDCSSLValidateServer Off

    # OpenID Connect discovery (metadata) URL (e.g., Keycloak)
    # Replace <KEYCLOAK_HOST> and <REALM> according to your setup
    OIDCProviderMetadataURL ${OIDC_PROVIDER_INTERNAL}${OIDC_REALM}/.well-known/openid-configuration
    OIDCProviderIssuer ${OIDC_PROVIDER}${OIDC_REALM}
    OIDCProviderAuthorizationEndpoint ${OIDC_PROVIDER}${OIDC_REALM}/protocol/openid-connect/auth
    OIDCProviderJwksUri ${OIDC_PROVIDER_INTERNAL}${OIDC_REALM}/protocol/openid-connect/certs
    OIDCProviderTokenEndpoint ${OIDC_PROVIDER_INTERNAL}${OIDC_REALM}/protocol/openid-connect/token
    OIDCProviderUserInfoEndpoint ${OIDC_PROVIDER_INTERNAL}${OIDC_REALM}/protocol/openid-connect/userinfo
    # The URI Keycloak redirects to after login
    # Must match a "Valid redirect URI" in the Keycloak client configuration
    OIDCRedirectURI ${portal_base_url}/redirect_uri
    # Secret key to encrypt cookies (any long passphrase)
    OIDCCryptoPassphrase ${OIDC_CRYPT}
    # Client ID configured in Keycloak
    OIDCClientID ${OIDC_CLIENT}
    # Client secret configured in Keycloak
    OIDCClientSecret ${OIDC_SECRET}
    OIDCRemoteUserClaim preferred_username
    OIDCInfoHook userinfo

    # Scopes to request
    OIDCScope "openid profile email"

    # If you want to enforce HTTPS on redirect
    # OIDCRequireSSL on

    # Where to store sessions (cookies, DB, memcache, Redis...), here: server-cache
    OIDCSessionType "server-cache"

    OIDCDefaultLoggedOutURL ${portal_base_url}
    OIDCPassIdTokenAs serialized
    OIDCPassRefreshToken On
    OIDCAuthNHeader X-Forwarded-User
    OIDCSessionInactivityTimeout 1800
    OIDCCacheShmEntrySizeMax 131601
    OIDCStateTimeout 600
    OIDCDefaultURL ${portal_base_url}
    OIDCCookie mod_auth_oidc_session

    # Pass user claims in headers
    OIDCPassClaimsAs "headers"
    OIDCClaimPrefix "X-USER-"

    LogLevel info
    LogLevel auth_openidc:debug
</IfModule>

# -----------------------------------
# VirtualHosts configuration
# -----------------------------------
Listen 443
<VirtualHost *:443>
    ServerName app.finzen.local
    ProxyPreserveHost On

    RewriteEngine on
    RewriteRule "^/logout" "${portal_base_url}/redirect_uri?logout=${portal_base_url}" [R,L]
    RewriteRule "^/userinfo" "${portal_base_url}/redirect_uri?info=json" [R,L]

    SSLEngine on
    SSLProxyEngine on
    SSLProxyVerify none
    SSLProxyCheckPeerName off

    SSLCertificateFile    "/usr/local/apache2/conf/my-ssl.crt"
    SSLCertificateKeyFile "/usr/local/apache2/conf/my-ssl.key"

    ProxyRequests on

    ProxyPass "/" "http://host.docker.internal:4200/"
    ProxyPassReverse "/" "http://host.docker.internal:4200/"

    # WebSocket proxy
    RewriteEngine On
    RewriteCond %{HTTP:Upgrade} =websocket [NC]
    RewriteRule /(.*) ws://host.docker.internal:4200/$1 [P,L]

    ProxyPass "/socket.io/" "ws://host.docker.internal:4200/socket.io/"
    ProxyPassReverse "/socket.io/" "ws://host.docker.internal:4200/socket.io/"

    ProxyPass "/vite/" "ws://host.docker.internal:4200/vite/"
    ProxyPassReverse "/vite/" "ws://host.docker.internal:4200/vite/"

    # DocumentRoot if you serve a static app (Angular build)
    DocumentRoot "/usr/local/apache2/htdocs"


    # Enforce authentication on all pages
    <Location />
        AuthType openid-connect
        Require valid-user
    </Location>

     # Exclude some endpoints from auth
     <Location /public>
         Require all granted
     </Location>


    # Endpoint to fetch user information
    <Location /userinfos>
        AuthType openid-connect
        Require valid-user
        SetHandler oidc-userinfo
    </Location>

    <Location /api>
        <If "-n %{HTTP:Authorization}">
            AuthType None
            Require all granted
        </If>
        <Else>
            AuthType openid-connect
            Require valid-user
            OIDCUnAuthAction 401
            RequestHeader set Authorization "Bearer %{OIDC_ACCESS_TOKEN}e"
        </Else>

        ProxyPass ${api_base_url}
        ProxyPassReverse ${api_base_url}
        Header always set Access-Control-Allow-Origin ${portal_base_url}
        Header always set Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
        Header always set Access-Control-Allow-Headers "Content-Type, Authorization"
        Header always set Access-Control-Allow-Credentials "true"
    </Location>



    ErrorLog /usr/local/apache2/logs/error.log
    CustomLog /usr/local/apache2/logs/access.log combined
</VirtualHost>

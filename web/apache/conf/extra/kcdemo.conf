# ----------------------------------------------------------------------
# Apache configuration file (example: /etc/apache2/sites-available/kcdemo.conf)
# ----------------------------------------------------------------------
LoadModule auth_openidc_module modules/mod_auth_openidc.so

Define portal_base_url https://${SERVER_NAME}
Define oidc_provider_base_url ${OIDC_PROVIDER}/${OIDC_REALM}
Define oidc_provider_internal_base_url ${OIDC_PROVIDER_INTERNAL}/${OIDC_REALM}
Define angular_host host.docker.internal:4200
Define angular_base_url http://${angular_host}
Define api_base_url https://host.docker.internal:9012

# -------------------------
# SSL configuration
# -------------------------
# Certificates: adjust to your environment
SSLCertificateFile        /usr/local/apache2/conf/my-ssl.crt
SSLCertificateKeyFile     /usr/local/apache2/conf/my-ssl.key
# If you have an intermediate CA:
# SSLCertificateChainFile /path/to/chain.crt

<IfModule mod_ssl.c>
<VirtualHost *:443>
    ServerName ${SERVER_NAME}

    # DocumentRoot for static files (no Angular)
    DocumentRoot "/usr/local/apache2/htdocs"
    <Directory "/usr/local/apache2/htdocs">
        Options Indexes FollowSymLinks
        AllowOverride None
        Require all granted
    </Directory>

    # -------------------------
    # mod_auth_openidc configuration
    # -------------------------
    # Keycloak discovery URL
    OIDCProviderMetadataURL         ${oidc_provider_internal_base_url}/.well-known/openid-configuration
    OIDCProviderTokenEndpoint       ${oidc_provider_internal_base_url}/protocol/openid-connect/token
    OIDCProviderJwksUri             ${oidc_provider_internal_base_url}/protocol/openid-connect/certs
    OIDCProviderUserInfoEndpoint    ${oidc_provider_internal_base_url}/protocol/openid-connect/userinfo

    #OIDCProviderTokenEndpointAuth client_secret_basic

    # OIDC client credentials registered in Keycloak
    OIDCClientID              ${OIDC_CLIENT}
    OIDCClientSecret          ${OIDC_SECRET}

    # Redirect URL after authentication (must match the URL configured on the Keycloak client)
    OIDCRedirectURI           ${portal_base_url}/protected/redirect_uri
    # Default URL if no target_link_uri is provided during SSO
    OIDCDefaultURL            ${portal_base_url}/

    # Secret passphrase to encrypt OIDC session cookies
    OIDCCryptoPassphrase      ${OIDC_CRYPT}

    #####################
    # Session config     #
    #####################
    # Stored server-side (safer for production)
    OIDCSessionType                     server-cache
    # 7 days
    OIDCSessionMaxDuration              604800
    #OIDCSessionMaxDuration              86400  # 24h
    #OIDCSessionInactivityTimeout        3600   # 1h
    # Automatically refresh access token 1 min before expiration
    OIDCRefreshAccessTokenBeforeExpiry  60

    # Misc options
    # Disable SSL verification for internal Keycloak in local/dev
    OIDCSSLValidateServer     Off

    # Adjust the claims you want to retrieve (remote_user, etc.)
    OIDCScope                 "openid email profile"
    # Explicitly enable PKCE with S256 (required by recent Keycloak)
    OIDCPKCEMethod            S256

    # -------------------------
    # Reverse proxy configuration
    # -------------------------
    ProxyPreserveHost       on
    ProxyRequests           off
    SSLProxyEngine          on
    SSLProxyVerify          none
    SSLProxyCheckPeerName   off


    # =====================
    # /userinfo endpoint
    # =====================
    # Activate userinfo URL
    OIDCInfoHook                userinfo
    OIDCUserInfoRefreshInterval 0
    # Ensure responses related to userinfo are never cached
    <Location /userinfo>
        Header always set Cache-Control "no-store, no-cache, must-revalidate, max-age=0, private"
        Header always set Pragma "no-cache"
        Header always set Expires "0"
    </Location>
    # Enable mod_rewrite for /userinfo -> redirect to OIDC callback
    RewriteEngine On
    RewriteRule                 "^/userinfo" "${portal_base_url}/protected/redirect_uri?info=json" [R,L]


    # -------------------------
    # OIDC protection (static)
    # -------------------------
    # Exclude the OIDC callback route from auth
    ProxyPass           /protected/redirect_uri !

    <Location />
        AuthType            None
        Require             all granted
    </Location>

    # Protect only the /protected section (root remains public)
    <Location /protected>
        AuthType            openid-connect
        Require             valid-user
        # Prevent caching of protected pages to avoid stale content after logout
        Header always set Cache-Control "no-store, no-cache, must-revalidate, max-age=0, private"
        Header always set Pragma "no-cache"
        Header always set Expires "0"
    </Location>

    # Logout handling
    OIDCDefaultLoggedOutURL     ${oidc_provider_base_url}/protocol/openid-connect/logout?redirect_uri=${portal_base_url}
    RewriteRule                 "^/logout" "${portal_base_url}/protected/redirect_uri?logout=${portal_base_url}" [R,L]


    # -------------------------
    # Protect access to your Spring Boot backend (/api) via OIDC
    # -------------------------
    <Location /api>
        <If "-n %{HTTP:Authorization}">
            AuthType    None
            Require     all granted
        </If>
        <Else>
            AuthType            openid-connect
            Require             valid-user
            OIDCUnAuthAction    401
            RequestHeader       set Authorization "Bearer %{OIDC_ACCESS_TOKEN}e"
        </Else>

        ProxyPass           ${api_base_url}/api
        ProxyPassReverse    ${api_base_url}/api
        Header              always set Access-Control-Allow-Origin ${portal_base_url}
        Header              always set Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
        Header              always set Access-Control-Allow-Headers "Content-Type, Authorization"
        Header              always set Access-Control-Allow-Credentials "true"
    </Location>

</VirtualHost>
</IfModule>